//
//  RoomsViewController.swift
//  Smarthome
//
//  Created by Richard Essemiah on 31/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RoomsDisplayLogic: class {
	func displayRooms(viewModel: [Rooms.FetchRooms.ViewModel])
}

class RoomsViewController: UIViewController, RoomsDisplayLogic  {
	var interactor: RoomsBusinessLogic?
	var router: (NSObjectProtocol & RoomsRoutingLogic & RoomsDataPassing)?
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = RoomsInteractor()
		let presenter = RoomsPresenter()
		let router = RoomsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	@objc func navigateToSingleRoom(roomName: String) {
		router?.routeToSingleRoom(room: roomName)
	}
	
	// MARK: View lifecycle
	override func viewDidLoad() {
		super.viewDidLoad()
		setup()
		doSomething()
		setupLabels()
		setupButtons()
		setupCollectionView()
	}

	@IBOutlet weak var profileImageButton: UIButton!
	@IBOutlet weak var greetingLabel: UILabel!
	@IBOutlet weak var welcomeMessageLabel: UILabel!
	@IBOutlet weak var addRoomButton: UIButton!
	@IBOutlet weak var roomsLabel: UILabel!
	@IBOutlet weak var roomsCollectionView: UICollectionView!
	
	var rooms: [Rooms.FetchRooms.ViewModel] = []
	
	// MARK: Do something
	func doSomething() {
		let request = Rooms.FetchRooms.Request()
		interactor?.fetchRoom(request: request)
	}
	
	func displayRooms(viewModel: [Rooms.FetchRooms.ViewModel]) {
		rooms = viewModel
		roomsCollectionView.reloadData()
	}
}

private extension RoomsViewController {
	// MARK: Setup
	func setupLabels() {
		// Greeting
		greetingLabel.text = "Hi Chaaya ðŸ‘‹"
		greetingLabel.font = .camptonSemiBold(ofSize: 30)
		greetingLabel.textColor = .black
		
		// Welcome
		welcomeMessageLabel.text = "Welcome to Richard Home."
		welcomeMessageLabel.font = .camptonMedium(ofSize: 15)
		
		let firstAttributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.black, .font: UIFont.camptonMedium(ofSize: 30)]
		let secondAttributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.black, .font: UIFont.camptonBold(ofSize: 30)]

		let firstString = NSMutableAttributedString(string: "Your ", attributes: firstAttributes)
		let secondString = NSAttributedString(string: "Rooms ", attributes: secondAttributes)
		firstString.append(secondString)
		roomsLabel.attributedText = firstString
		
	}
	
	func setupButtons() {
		addRoomButton.setTitle("Add", for: .normal)
		addRoomButton.backgroundColor = #colorLiteral(red: 0.8862745098, green: 0.9647058824, blue: 0.9607843137, alpha: 1)
		addRoomButton.layer.cornerRadius = 10
//		addRoomButton.setImage(#imageLiteral(resourceName: "ic-back").withRenderingMode(.alwaysTemplate), for: .normal)
		addRoomButton.titleLabel?.font = .camptonBook(ofSize: 15)
	}
	
	func setupCollectionView() {
		roomsCollectionView?.register(RoomCollectionViewCell.self)
		roomsCollectionView?.delegate = self
		roomsCollectionView?.dataSource = self
		roomsCollectionView.backgroundColor = .clear
	}
}

// MARK: UICollection view
extension RoomsViewController: UICollectionViewDataSource,
									   UICollectionViewDelegateFlowLayout {
	
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return rooms.count
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		let cell: RoomCollectionViewCell = collectionView.dequeueReusableCell(for: indexPath)
		let room = rooms[indexPath.row]
		cell.roomViewModel = room
		cell.config(roomViewModel: room)
		return cell
	}
	
	func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
		let height = view.frame.height * 0.2 + 10
		let width = (view.frame.width / 2.5) + 10
		return CGSize(width: width, height: height)
	}
	
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		let room = rooms[indexPath.row]
		navigateToSingleRoom(roomName: room.name)
	}
}
