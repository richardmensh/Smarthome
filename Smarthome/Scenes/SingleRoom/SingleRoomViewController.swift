//
//  SingleRoomViewController.swift
//  Smarthome
//
//  Created by Richard Essemiah on 01/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SingleRoomDisplayLogic: AnyObject {
	func displayDevices(viewModel: [SingleRoom.FetchDevice.ViewModel])
}

class SingleRoomViewController: UIViewController, SingleRoomDisplayLogic  {
	var interactor: SingleRoomBusinessLogic?
	var router: (NSObjectProtocol & SingleRoomRoutingLogic & SingleRoomDataPassing)?
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = SingleRoomInteractor()
		let presenter = SingleRoomPresenter()
		let router = SingleRoomRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	@objc func navigateBack() {
		router?.routeBackToListRooms()
	}
	
	@objc func navigateToLedControl() {
		router?.routeToLedControl()
	}
	
	@objc func navigateToSmartPlugControl() {
		router?.routeToSmartPlugControl()
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		setup()
		setupLabels()
		setupButtons()
		setupViews()
		setupCollectionView()
		doSomething()
		displayRoomInfo()
	}
	
	override func viewDidLayoutSubviews() {
		super.viewDidLayoutSubviews()
		
		temperatureBackgroundView.layer.cornerRadius = temperatureBackgroundView.frame.height / 2
		temperatureView.layer.cornerRadius = temperatureView.frame.height / 2
	}
	
	@IBOutlet weak var backButton: UIButton!
	@IBOutlet weak var roomNameLabel: UILabel!
	@IBOutlet weak var temperatureBackgroundView: UIView!
	@IBOutlet weak var temperatureView: UIView!
	@IBOutlet weak var temperatureLabel: UILabel!
	@IBOutlet weak var temperatureDescLabel: UILabel!
	@IBOutlet weak var deviceCollectionView: UICollectionView!
	@IBOutlet weak var deviceCountLabel: UILabel!
	
	var devices: [SingleRoom.FetchDevice.ViewModel] = []
	var singleRoom: String?
	
	// MARK: Fetch Devices
	func doSomething() {
		let request = SingleRoom.FetchDevice.Request()
		interactor?.doSomething(request: request)
	}
	
	func displayDevices(viewModel: [SingleRoom.FetchDevice.ViewModel]) {
		devices = viewModel
		deviceCollectionView.reloadData()
	}
	
	// MARK: Display Room Info
	func displayRoomInfo() {
		guard let roomInfo = singleRoom else { return }
		roomNameLabel.text = roomInfo
	}
}

private extension SingleRoomViewController {
	// MARK: View Setup
	func setupLabels() {
		roomNameLabel.font = .camptonMedium(ofSize: 20)
		roomNameLabel.textColor = .black
		
		temperatureLabel.text = "21â„ƒ"
		temperatureLabel.font = .camptonBold(ofSize: 50)
		temperatureLabel.textColor = .black
		
		temperatureDescLabel.text = "Room\nTemperature"
		temperatureDescLabel.font = .camptonLight(ofSize: 15)
		temperatureLabel.textAlignment = .center
		temperatureDescLabel.textColor = .black
		
		deviceCountLabel.text = "Devices"
		deviceCountLabel.font = .camptonMedium(ofSize: 20)
		deviceCountLabel.textColor = .black
	}
	
	func setupButtons() {
		backButton.setImage(#imageLiteral(resourceName: "ic-back").withRenderingMode(.alwaysTemplate), for: .normal)
		backButton.setTitle("", for: .normal)
		backButton.tintColor = .black
		backButton.addTarget(self, action: #selector(navigateBack), for: .touchUpInside)
	}
	
	func setupViews() {
		temperatureBackgroundView.backgroundColor = .gray
		temperatureView.backgroundColor = .white
	}
	
	func setupCollectionView() {
		deviceCollectionView?.register(DeviceCollectionViewCell.self)
		deviceCollectionView?.delegate = self
		deviceCollectionView?.dataSource = self
		deviceCollectionView.backgroundColor = .clear
	}
}

// MARK: UICollection view
extension SingleRoomViewController: UICollectionViewDataSource,
									   UICollectionViewDelegateFlowLayout {
	
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return devices.count
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		let cell: DeviceCollectionViewCell = collectionView.dequeueReusableCell(for: indexPath)
		let device = devices[indexPath.row]
		cell.deviceViewModel = device
		cell.config(deviceViewModel: device)
		return cell
	}
	
	func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
		let height = (deviceCollectionView.frame.height * 0.95)
		let width = (view.frame.width * 0.3)
		return CGSize(width: width, height: height)
	}
	
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		let device = devices[indexPath.row]
		
		if device.type == .ledLamps {
			navigateToLedControl()
		}
		
		if device.type == .smartPlugs {
			navigateToSmartPlugControl()
		}
	}
}
